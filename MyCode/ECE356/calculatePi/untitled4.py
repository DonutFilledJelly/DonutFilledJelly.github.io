# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11bfpbnh1Osugm_ylQNEIY0SwnqEF05Hr
"""

from __future__ import print_function, absolute_import
from numba import cuda
from numba.cuda.random import create_xoroshiro128p_states, xoroshiro128p_uniform_float32
import numpy as np
import time

@cuda.jit
def pi_circle(rng_, iterations, my_var):
    thread_id = cuda.grid(1)

    inside = 0
    
    for i in range(iterations):
        x = xoroshiro128p_uniform_float32(rng_, thread_id)
        y = xoroshiro128p_uniform_float32(rng_, thread_id)
        
        
        if x**2 + y**2 <= 1.0:
            inside += 1

    my_var[thread_id] = 4.0 * inside / iterations


t0 = time.time()
threads_per_block = 512
num_of_blocks = 64
total = 100000000
rng_ = create_xoroshiro128p_states(threads_per_block * num_of_blocks, seed=1)
my_var = np.zeros(threads_per_block * num_of_blocks, dtype=np.float32)

pi_circle[num_of_blocks, threads_per_block](rng_, total, my_var)
t1 = time.time()
total_time = t1-t0

print('pi:', my_var.mean())
print('time:', total_time, 'seconds')